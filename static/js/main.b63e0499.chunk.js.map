{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","None","sortField","setSortField","isReversed","setIsReversed","listOfGoods","goods","prepareGoods","sort","good1","good2","Alph","localeCompare","Lngth","length","reverse","getPreparedList","className","onClick","type","classNames","JSON","stringify","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,0EAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,K,2BAAAA,E,uBAAAA,E,aAAAA,M,KAkCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAAUI,MAArD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA/BR,SACEC,EADF,GAGG,IADCL,EACF,EADEA,UAAWE,EACb,EADaA,WAETI,EAAY,YAAOD,GAqBvB,OAnBIL,IAAcL,EAAUI,MAC1BO,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAKL,EAAUe,KACb,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAAUiB,MACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,IACFI,EAAeA,EAAaQ,WAGvBR,EAOHS,CAAgBnB,EAAiB,CAAEI,YAAWE,eAmBlD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QArBiB,WACvBhB,EAAaN,EAAUe,OAqBjBQ,KAAK,SACLF,UACEG,IAAW,iBACT,CAAE,WAAYnB,IAAcL,EAAUe,OAL5C,iCAWA,wBACEO,QA5BkB,WACxBhB,EAAaN,EAAUiB,QA4BjBM,KAAK,SACLF,UACEG,IAAW,oBACT,CAAE,WAAYnB,IAAcL,EAAUiB,QAL5C,4BAWA,wBACEK,QAnCoB,kBACbd,GAAbD,IAmCMgB,KAAK,SACLF,UACEG,IAAW,oBACT,CAAE,YAAajB,IALrB,qBAWCkB,KAAKC,UAAUzB,KAAqBwB,KAAKC,UAAUjB,IAClD,wBACEa,QA3CU,WAClBd,GAAc,GACdF,EAAaN,EAAUI,OA0CfmB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAYkB,KAAI,SAAAC,GAAI,OACnB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YC9HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b63e0499.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface FilterParams {\n  sortField: string;\n  isReversed: boolean;\n}\n\nenum SortField {\n  Alph = 'Sort alphabetically',\n  Lngth = 'Sort by length',\n  None = 'none',\n}\n\nfunction getPreparedList(\n  goods: string[],\n  { sortField, isReversed }: FilterParams,\n) {\n  let prepareGoods = [...goods];\n\n  if (sortField !== SortField.None) {\n    prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alph:\n          return good1.localeCompare(good2);\n\n        case SortField.Lngth:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortField.None);\n  const [isReversed, setIsReversed] = useState(false);\n  const listOfGoods\n    = getPreparedList(goodsFromServer, { sortField, isReversed });\n\n  const handleSortByAlph = () => {\n    setSortField(SortField.Alph);\n  };\n\n  const handleSortByLngth = () => {\n    setSortField(SortField.Lngth);\n  };\n\n  const handleToggleReverse = () => (\n    isReversed ? setIsReversed(false) : setIsReversed(true)\n  );\n\n  const handleReset = () => {\n    setIsReversed(false);\n    setSortField(SortField.None);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={handleSortByAlph}\n          type=\"button\"\n          className={\n            classNames('button is-info',\n              { 'is-light': sortField !== SortField.Alph })\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={handleSortByLngth}\n          type=\"button\"\n          className={\n            classNames('button is-success',\n              { 'is-light': sortField !== SortField.Lngth })\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={handleToggleReverse}\n          type=\"button\"\n          className={\n            classNames('button is-warning',\n              { 'is-light': !isReversed })\n          }\n        >\n          Reverse\n        </button>\n\n        {JSON.stringify(goodsFromServer) !== JSON.stringify(listOfGoods) && (\n          <button\n            onClick={handleReset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {listOfGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}